<div class="fixed flex-col bg-blue-500 wnPlugin wnBig pl-10 pr-10 pb-20 pt-20 rounded-lg  flex">
    <div>
        <div id="wnMsgTemplatewnBig" data-template>
            <div class="text-4xl text-white">${title}</div>
            <div class="mt-4 wnHtml">
                ${html}
            </div>
        </div>
    </div>
    <button
        class="wnMsgBigCloseBtn mt-4 bg-white dark:bg-zinc-800 hover:dark:bg-zinc-700 hover:bg-zinc-100 text-blue-600 dark:text-blue-400 font-bold py-2 px-4 rounded">
        Mark as read
    </button>
</div>
<div class="fixed flex-col bg-blue-500 wnPlugin wnSmall pl-10 pr-10 pb-20 pt-5 rounded-lg  flex justify-center"
    data-hidden="1">
    <div class="w-full flex justify-end">
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="32px" height="32px" viewBox="0 0 24 24">
                <path fill="white"
                    d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12z" />
            </svg>
        </div>
    </div>
    <div>
        <div id="wnMsgTemplatewnSmall" class="text-lg text-white" data-template>
            <span class="wnMsgTitle font-bold">${computedTitle}</span>
            <p class="wnMsgShortDescription mt-6">${shortDescription}</p>

            <button
                class="wnMsgLearnMoreBtn mt-4 bg-white dark:bg-zinc-800 hover:dark:bg-zinc-700 hover:bg-zinc-100 text-blue-600 dark:text-blue-400 font-bold py-2 px-4 rounded">
                Learn More
            </button>
        </div>
    </div>
</div>
<style>
    .wnPlugin.wnSmall {
        right: 10px;
        bottom: 10px;
        max-width: 350px;
    }

    .wnPlugin.wnBig {
        max-width: calc(80wh);
        top:10%;
    }

    .wnPlugin[data-hidden='1'] {
        display: none;
    }

    .wnHtml a,.wnHtml h1,.wnHtml h2,.wnHtml p,.wnHtml span,.wnHtml li{
        color:white;
    }

    .wnHtml h1 {
        color: black;
        font-size: 30px;
        padding-bottom: 12px;
    }

    .wnHtml h2 {
        
        font-size: 25px;
        padding-bottom: 8px;
    }

    .wnHtml iframe {
        margin-bottom: 10px;
        margin-top: 10px;
    }
</style>
<script>
    function usePlugin() {
    }
    app.pluginVM = {
        modeSelector: '.wnBig', //wnSmall wnBig
        activeMessage: null,
        backendURL: 'http://localhost:3000',
        mounted() {
            console.log('usePluginVM mounted')
            app.pluginVM.enable()

            document.querySelector('.wnMsgBigCloseBtn').addEventListener('click', () => {
                app.pluginVM.toggleMode()
            })
        },
        async enable() {
            console.log('enable', app.pluginVM.modeSelector)
            document.querySelector(`.wnPlugin${app.pluginVM.modeSelector}`).dataset.hidden = '0'
            await app.pluginVM.syncActiveMessage()
            app.pluginVM.updateDom()
        },
        disable() {
            document.querySelector(`.wnPlugin${app.pluginVM.modeSelector}`).dataset.hidden = '1'
        },
        toggleMode() {
            console.info('toggleMode')
            app.pluginVM.modeSelector = app.pluginVM.modeSelector === '.wnBig' ? '.wnSmall' : '.wnBig'
            app.pluginVM.hideAllPanels()
            app.pluginVM.enable()
        },
        clearCache() {
            window.localStorage.wnMgsRead = ''
        },
        hideAllPanels() {
            document.querySelectorAll(`.wnPlugin`).forEach(el => {
                el.dataset.hidden = '1'
            })
        },
        syncActiveMessage() {
            return fetch(`${app.pluginVM.backendURL}/messages?active=1`)
                .then(response => response.json())
                .then(data => {
                    app.pluginVM.activeMessage = data.length > 0 ? data[0] : null
                    return
                });
        },
        updateDom() {
            let selector = `#wnMsgTemplate${app.pluginVM.modeSelector}`.split('.').join('')
            console.info('updateDom', app.pluginVM.modeSelector, document.querySelector(selector))
            let mappings = {
                computedTitle: item => item.shortTitle || item.title
            }
            virtualForEach(selector, app.pluginVM.activeMessage ? [app.pluginVM.activeMessage] : [], item => item._id).update(mappings)

            console.log('bind', document.querySelectorAll('.wnMsgLearnMoreBtn'))
            document.querySelectorAll('.wnMsgLearnMoreBtn').forEach(el => {
                el.addEventListener('click', () => {
                    app.pluginVM.toggleMode()
                })
            })


        }
    }
</script>